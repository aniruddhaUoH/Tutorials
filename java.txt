Static
- it is used for memory efficiency. At the time of class loading only, it allocates memory. 

class counter {
   static int i = 0; //without static it will display: 1 1 1
   counter() {
   	i++;
   	System.out.println(i);
   }
   public static void main() {
       counter cnt1 = new counter();
       counter cnt2 = new counter();
       counter cnt3 = new counter();
   }
}

- for static method, jvm doesn't need to create object. If it is non static method, then jvm first creates object, and for that case it will lead problem of extra memory allocation.

- We can execute a program without main method. One of the way is static block.

class A3 {  
   static {  
      System.out.println("static block is invoked");  
      System.exit(0);  
   }  
}

public class TestThrow1{  
   static void validate(int age){  
      if(age<18)  
         throw new ArithmeticException("not valid");  
      else  
         System.out.println("welcome to vote");  
   }  
   public static void main(String args[]){  
      validate(13);  
      System.out.println("rest of the code...");  
   }  
}

class TestExceptionPropagation1{  
   void m(){  
      int data=50/0;  
   }  
   void n(){  
      m();  
   }  
   void p(){  
      try{  
         n();  
      } catch(Exception e){System.out.println("exception handled");}  
   }  
   public static void main(String args[]){  
      TestExceptionPropagation1 obj=new TestExceptionPropagation1();  
      obj.p();  
      System.out.println("normal flow...");  
   }  
}  

- Throw vs Throws
Java throw keyword is used to explicitly throw an exception.	Java throws keyword is used to declare an exception.
Checked exception cannot be propagated using throw only.	Checked exception can be propagated with throws.
Throw is followed by an instance.				Throws is followed by class.
Throw is used within the method.				Throws is used with the method signature.
You cannot throw multiple exceptions.				You can declare multiple exceptions e.g.
									public void method() throws IOException,SQLException.

import java.io.IOException;  
class Testthrows1{  
   void m()throws IOException{  
      throw new IOException("device error");//checked exception  
   }  
   void n()throws IOException{  
      m();  
   }  
   void p(){  
      try{  
         n();  
      } catch(Exception e){System.out.println("exception handled");}  
   }  
   public static void main(String args[]){  
      Testthrows1 obj=new Testthrows1();  
      obj.p();  
      System.out.println("normal flow...");  
   }  
}  

Final
- Final is used to apply restrictions on class, method and variable. 
- Final class can't be inherited, 
- final method can't be overridden and final variable value can't be changed.
- Final is a keyword.	

Finally
- Finally is used to place important code, it will be executed whether exception is handled or not.	
- Finally is a block.

Finalize
- Finalize is used to perform clean up processing just before object is garbage collected.
- Finalize is a method.

class FinalExample{  
   public static void main(String[] args){  
      final int x=100;  
      x=200;//Compile Time Error  
   }
}  

class FinalizeExample{  
   public void finalize(){
      System.out.println("finalize called");
   }  
   public static void main(String[] args){  
      FinalizeExample f1=new FinalizeExample();  
      FinalizeExample f2=new FinalizeExample();  
      f1=null;  
      f2=null;  
      System.gc();  
   }
}  

Custom exception
- If you are creating your own Exception that is known as custom exception or user-defined exception. Java custom exceptions are used to customize the exception according to user need.

class InvalidAgeException extends Exception{  
   InvalidAgeException(String s){  
      super(s);  
   }  
}  
class TestCustomException1{  
   static void validate(int age)throws InvalidAgeException{  
      if(age<18)  
         throw new InvalidAgeException("not valid");  
      else  
         System.out.println("welcome to vote");  
   }  
     
   public static void main(String args[]){  
      try{  
         validate(13);  
      } catch(Exception m){System.out.println("Exception occured: "+m);}  
  
      System.out.println("rest of the code...");  
   }  
}  

Output:Exception occured: InvalidAgeException:not valid
       rest of the code...
       
this
- There can be a lot of usage of java this keyword. In java, this is a reference variable that refers to the current object.

Usage of java this keyword
- this can be used to refer current class instance variable.
- this can be used to invoke current class method (implicitly)
- this() can be used to invoke current class constructor.
- this can be passed as an argument in the method call.
- this can be passed as argument in the constructor call.
- this can be used to return the current class instance from the method.


