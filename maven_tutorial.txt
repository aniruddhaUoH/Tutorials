Ant vs Maven
 - Ant doesn't has formal conventions, so we need to provide information of the project structure in build.xml file.
 -> Maven has a convention to place source code, compiled code etc. So we don't need to provide information about the project structure in pom.xml file.

 - Ant is procedural, you need to provide information about what to do and when to do through code. You need to provide order.
 -> Maven is declarative, everything you define in the pom.xml file.

 - There is no life cycle in Ant.
 -> There is life cycle in Maven.

 - It is a tool box.
 -> It is a framework.

 - It is mainly a build tool.
 -> It is mainly a project management tool.

 - The ant scripts are not reusable.
 -> The maven plugins are reusable.
 
POM.xml:
 - POM is an acronym for Project Object Model. The pom.xml file contains information of project and configuration information for the maven to build the project such as dependencies, build directory, source directory, test source directory, plugin, goals etc.

Element		Description
-------		-----------
project		It is the root element of pom.xml file.
modelVersion	It is the sub element of project. It specifies the modelVersion. It should be set to 4.0.0.
groupId		It is the sub element of project. It specifies the id for the project group.
artifactId	It is the sub element of project. It specifies the id for the artifact (project). An artifact is something that is either 			produced or used by a project. Examples of artifacts produced by Maven for a project include: JARs, source and binary 			distributions, and WARs.
version		It is the sub element of project. It specifies the version of the artifact under given group.
packaging	defines packaging type such as jar, war etc.
name		defines name of the maven project.
url		defines url of the project.
dependencies	defines dependencies for this project.
dependency	defines a dependency. It is used inside dependencies.
scope		defines scope for this maven project. It can be compile, provided, runtime, test and system.

The maven plugins are central part of maven framework, it is used to perform specific goal. According to Apache Maven, there are 2 types of maven plugins.
 - Build Plugins
    - These plugins are executed at the time of build. These plugins should be declared inside the <build> element.
 - Reporting Plugins
    - These plugins are executed at the time of site generation. These plugins should be declared inside the <reporting> element.

A list of maven core plugins are given below:

Plugin		Description
------		-----------
clean		clean up after build.
compiler	compiles java source code.
deploy		deploys the artifact to the remote repository.
failsafe	runs the JUnit integration tests in an isolated classloader.
install		installs the built artifact into the local repository.
resources	copies the resources to the output directory for including in the JAR.
site		generates a site for the current project.
surefire	runs the JUnit unit tests in an isolated classloader.
verifier	verifies the existence of certain conditions. It is useful for integration tests.

A maven repository is a directory of packaged JAR file with pom.xml file. Maven searches for dependencies in the repositories. There are 3 types of maven repository:
 - Local Repository
    - Maven local repository is located in your local system. It is created by the maven when you run any maven command.
 - Central Repository
    - Maven central repository is located on the web. It has been created by the apache maven community itself.
 - Remote Repository
    - Maven remote repository is located on the web. Most of libraries can be missing from the central repository such as JBoss library etc, 	   so we need to define remote repository in pom.xml file.
 
Maven searches for the dependencies in the following order:
 - Local repository =--> Central repository =--> Remote repository.

The primary life cycle of Maven is used to build the application. It has the following 23 phases.

Sr.No.		Lifecycle Phase & Description
1		validate
		- Validates whether project is correct and all necessary information is available to complete the build process.
2		initialize
		- Initializes build state, for example set properties.
3		generate-sources
		- Generate any source code to be included in compilation phase.
4		process-sources
		- Process the source code, for example, filter any value.
5		generate-resources
		- Generate resources to be included in the package.
6		process-resources
		- Copy and process the resources into the destination directory, ready for packaging phase.
7		compile
		- Compile the source code of the project.
8		process-classes
		- Post-process the generated files from compilation, for example to do bytecode enhancement/optimization on Java classes.
9		generate-test-sources
		- Generate any test source code to be included in compilation phase.
10		process-test-sources
		- Process the test source code, for example, filter any values.
11		test-compile
		- Compile the test source code into the test destination directory.
12		process-test-classes
		- Process the generated files from test code file compilation.
13		test
		- Run tests using a suitable unit testing framework (Junit is one).
14		prepare-package
		- Perform any operations necessary to prepare a package before the actual packaging.
15		package
		- Take the compiled code and package it in its distributable format, such as a JAR, WAR, or EAR file.
16		pre-integration-test
		- Perform actions required before integration tests are executed. For example, setting up the required environment.
17		integration-test
		- Process and deploy the package if necessary into an environment where integration tests can be run.
18		post-integration-test
		- Perform actions required after integration tests have been executed. For example, cleaning up the environment.
19		verify
		- Run any check-ups to verify the package is valid and meets quality criteria.
20		install
		- Install the package into the local repository, which can be used as a dependency in other projects locally.
21		deploy
		- Copies the final package to the remote repository for sharing with other developers and projects.

